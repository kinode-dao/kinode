/// The App Store manages the discovery, download, and installation of packages (apps)
/// in the Hyperware ecosystem. It consists of three main processes: main, chain, and downloads.

/// main:app-store:sys
interface main {
    use standard.{package-id};
    use chain.{onchain-metadata, chain-error};
    use downloads.{download-error};

    /// Represents various requests that can be made to the main App Store interface
    variant request {
        local(local-request),
        /// remote requests possible in future--currently all handled by downloads process
    }

    /// Represents various responses from the main App Store interface
    variant response {
        local(local-response),
        chain-error(chain-error),
        download-error(download-error),
    }

    /// Local requests that can be made to the App Store
    variant local-request {
        /// Request to add a new package to app-store.
        ///
        /// Used by kit start-package.
        ///
        /// lazy-load-blob: required; the zipped package to be added.
        new-package(new-package-request),
        /// Request to install a package.
        ///
        /// lazy-load-blob: none.
        install(install-package-request),
        /// Request to uninstall a package.
        ///
        /// lazy-load-blob: none.
        uninstall(package-id),
        /// Request to list all available APIs
        ///
        /// lazy-load-blob: none.
        apis,
        /// Request to get a specific API
        ///
        /// lazy-load-blob: none.
        get-api(package-id),
    }

    /// Local responses from the App Store
    variant local-response {
        /// lazy-load-blob: none.
        new-package-response(new-package-response),
        /// lazy-load-blob: none.
        install-response(install-response),
        /// lazy-load-blob: none.
        uninstall-response(uninstall-response),
        /// lazy-load-blob: none.
        apis-response(apis-response),
        /// lazy-load-blob: on success; the WIT API that was requested.
        get-api-response(get-api-response),
    }

    /// Request to add a new package
    record new-package-request {
        package-id: package-id,
        mirror: bool,
    }

    /// Request to install a package
    record install-package-request {
        package-id: package-id,
        /// if None, local sideloaded package.
        metadata: option<onchain-metadata>,
        version-hash: string,
    }

    /// Response for a new package request
    enum new-package-response {
        success,
        no-blob,
        install-failed,
        already-exists,
    }

    /// Response for an install request
    enum install-response {
        success,
        failure,
    }

    /// Response for an uninstall request
    enum uninstall-response {
        success,
        failure,
    }

    /// Response containing a list of available APIs
    record apis-response {
        apis: list<package-id>,
    }

    /// Response for a get-api request
    /// The API itself will be in the response blob if successful
    enum get-api-response {
        success,
        failure,
    }
}

/// chain:app-store:sys
/// This process holds information about on-chain ~uri and ~hash notes,
/// and fetches the metadata with the http-client:distro:sys when necessary.
interface chain {
    use standard.{package-id};

    /// Requests that can be made to the chain component
    variant chain-request {
        /// Get information about a specific app
        ///
        /// lazy-load-blob: none.
        get-app(package-id),
        /// Get information about all apps
        ///
        /// lazy-load-blob: none.
        get-apps,
        /// Get information about apps published by the current node
        ///
        /// lazy-load-blob: none.
        get-our-apps,
        /// Start auto-updating an app
        ///
        /// lazy-load-blob: none.
        start-auto-update(package-id),
        /// Stop auto-updating an app
        ///
        /// lazy-load-blob: none.
        stop-auto-update(package-id),
        /// Reset app-store db
        ///
        /// lazy-load-blob: none.
        reset,
    }

    /// Responses from the chain component
    variant chain-response {
        /// lazy-load-blob: none.
        get-app(option<onchain-app>),
        /// lazy-load-blob: none.
        get-apps(list<onchain-app>),
        /// lazy-load-blob: none.
        get-our-apps(list<onchain-app>),
        /// lazy-load-blob: none.
        auto-update-started,
        /// lazy-load-blob: none.
        auto-update-stopped,
        /// lazy-load-blob: none.
        /// successful reset
        reset-ok,
        err(chain-error),
    }

    /// Possible errors from the chain component
    variant chain-error {
        no-package,
    }

    /// Represents an app as stored on-chain
    record onchain-app {
        package-id: package-id,
        tba: string,
        metadata-uri: string,
        metadata-hash: string,
        metadata: option<onchain-metadata>,
        auto-update: bool,
    }

    /// Metadata associated with an on-chain app
    record onchain-metadata {
        name: option<string>,
        description: option<string>,
        image: option<string>,
        external-url: option<string>,
        animation-url: option<string>,
        properties: onchain-properties,
    }

    /// Properties associated with an on-chain app
    record onchain-properties {
        package-name: string,
        publisher: string,
        current-version: string,
        mirrors: list<string>,
        code-hashes: list<tuple<string, string>>,
        license: option<string>,
        screenshots: option<list<string>>,
        wit-version: option<u32>,
        dependencies: option<list<string>>,
    }
}

/// downloads:app-store:sys
/// This process is responsible for downloading app packages from remote mirrors,
/// spawning ft_workers, and serves the files to the main:app-store:sys process.
/// It also manages the local storage of downloaded app zip packages.
///
interface downloads {
    use standard.{package-id};
    use chain.{onchain-metadata};

    /// Requests that can be made to the downloads component
    variant download-request {
        /// Check if a a node is mirroring a given package.
        /// returns a success response if the node is mirroring the package,
        /// otherwise an error response of type err(not-mirroring).
        ///
        /// lazy-load-blob: none.
        mirror-check(package-id),
        /// Request a remote download
        ///
        /// lazy-load-blob: none.
        remote-download(remote-download-request),
        /// Request a chunk of a file
        ///
        /// lazy-load-blob: none.
        chunk(chunk-request),
        /// Update download progress
        ///
        /// lazy-load-blob: none.
        progress(progress-update),
        /// Update file size information
        ///
        /// lazy-load-blob: none.
        size(size-update),
        /// Request a local download
        ///
        /// lazy-load-blob: none.
        local-download(local-download-request),
        /// Request an auto-update
        ///
        /// lazy-load-blob: none.
        auto-update(auto-update-request),
        /// Notify that a download is complete
        ///
        /// lazy-load-blob: none.
        download-complete(download-complete-request),
        /// Auto-update-download complete
        ///
        /// lazy-load-blob: none.
        auto-download-complete(auto-download-complete-request),
        /// Get files for a package
        ///
        /// lazy-load-blob: none.
        get-files(option<package-id>),
        /// Remove a file
        ///
        /// lazy-load-blob: none.
        remove-file(remove-file-request),
        /// Add a download
        ///
        /// lazy-load-blob: none.
        add-download(add-download-request),
        /// Start mirroring a package
        ///
        /// lazy-load-blob: none.
        start-mirroring(package-id),
        /// Stop mirroring a package
        ///
        /// lazy-load-blob: none.
        stop-mirroring(package-id),
    }

    /// Responses from the downloads component
    variant download-response {
        /// catch-all success response
        /// lazy-load-blob: none.
        success,
        /// lazy-load-blob: none.
        get-files(list<entry>),
        /// catch-all error response
        /// lazy-load-blob: none.
        err(download-error),
    }

    /// Request for a local download
    record local-download-request {
        package-id: package-id,
        download-from: string,
        desired-version-hash: string,
    }

    /// Request for an auto-update
    record auto-update-request {
        package-id: package-id,
        metadata: onchain-metadata,
    }

    /// Request for a remote download
    record remote-download-request {
        package-id: package-id,
        worker-address: string,
        desired-version-hash: string,
    }

    /// Possible errors during download operations
    variant download-error {
        no-package,
        not-mirroring,
        hash-mismatch(hash-mismatch),
        file-not-found,
        worker-spawn-failed,
        http-client-error,
        blob-not-found,
        vfs-error,
        timeout,
        invalid-manifest,
        offline,
    }

    /// Notification that a download is complete
    record download-complete-request {
        package-id: package-id,
        version-hash: string,
        err: option<download-error>,
    }

    /// Variant for an auto-download complete
    variant auto-download-complete-request {
        success(auto-download-success),
        err(auto-download-error),
    }

    /// Auto-download success
    record auto-download-success {
        package-id: package-id,
        version-hash: string,
        manifest-hash: string,
    }

    /// Auto-download error
    record auto-download-error {
        package-id: package-id,
        version-hash: string,
        /// list is of (mirror, error)
        tries: list<tuple<string, download-error>>,
    }

    /// Represents a hash mismatch error
    record hash-mismatch {
        desired: string,
        actual: string,
    }

    /// Request for a specific chunk of a file
    record chunk-request {
        package-id: package-id,
        version-hash: string,
        offset: u64,
        length: u64,
    }

    /// Represents an entry in the file system (either a file or a directory)
    variant entry {
        file(file-entry),
        dir(dir-entry),
    }

    /// Represents a file entry
    record file-entry {
        name: string,
        size: u64,
        manifest: string,
    }

    /// Represents a directory entry
    record dir-entry {
        name: string,
        mirroring: bool,
    }

    /// Request to remove a file
    record remove-file-request {
        package-id: package-id,
        version-hash: string,
    }

    /// Request to add a download
    record add-download-request {
        package-id: package-id,
        version-hash: string,
        mirror: bool,
    }

    /// Update on the progress of a download
    record progress-update {
        package-id: package-id,
        version-hash: string,
        downloaded: u64,
        total: u64,
    }

    /// Update on the size of a file
    record size-update {
        package-id: package-id,
        size: u64,
    }
}

/// The app-store-sys-v1 world, which includes the main, downloads, and chain interfaces
world app-store-sys-v1 {
    import main;
    import downloads;
    import chain;
    include process-v1;
}
